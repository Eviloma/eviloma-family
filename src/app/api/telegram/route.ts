import dayjs from "dayjs";
import { eq, lt, or } from "drizzle-orm";
import { StatusCodes } from "http-status-codes";
import { customAlphabet } from "nanoid";
import { type NextRequest, NextResponse } from "next/server";

import { ApiErrorClass, ForbiddenError, MissingRequiredParamsError, UserNotFoundError } from "@/classes/ApiError";
import db from "@/db";
import { telegramLinkTokens, users } from "@/db/schema";
import type API from "@/types/api";
import type TelegramPOST from "@/types/telegram-post";
import apiErrorHandler from "@/utils/api/api-error-handler";
import fetchUserInfo from "@/utils/api/authorization-check";

const nanoid = customAlphabet("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 16);

export async function POST(req: NextRequest): API<TelegramPOST> {
  try {
    const userInfo = await fetchUserInfo();

    // Remove old tokens
    await db
      .delete(telegramLinkTokens)
      .where(or(eq(telegramLinkTokens.user, userInfo.sub), lt(telegramLinkTokens.validUntil, dayjs().toDate())));

    // Create new token
    const newToken = await db
      .insert(telegramLinkTokens)
      .values({
        token: nanoid(16),
        user: userInfo.sub,
        validUntil: dayjs().add(15, "minutes").toDate(),
      })
      .returning();

    // Return token
    if (!newToken[0]) {
      throw new ApiErrorClass(StatusCodes.INTERNAL_SERVER_ERROR, "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞");
    }

    return NextResponse.json({
      token: newToken[0]?.token,
    });
  } catch (error) {
    return apiErrorHandler(req, error);
  }
}

export async function PUT(req: NextRequest) {
  try {
    const authorization = req.headers.get("Authorization");

    if (!authorization || authorization !== `Bearer ${process.env.TELEGRAM_API_KEY}`) {
      throw ForbiddenError();
    }

    const { token, telegramID, username } = await req.json();

    if (!token || !telegramID) {
      throw MissingRequiredParamsError({ message: "–¢–æ–∫–µ–Ω —Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º ID –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏" });
    }

    const tokenObject = await db.query.telegramLinkTokens.findFirst({
      where: eq(telegramLinkTokens.token, token),
    });

    if (!tokenObject) {
      throw new ApiErrorClass(StatusCodes.BAD_REQUEST, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", {
        code: "INVALID_TOKEN",
        telegram:
          "–ü–æ–º–∏–ª–∫–∞üòû\n‚ÑπÔ∏è –ß–∞—Å –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ Telegram –∞–∫–∞—É–Ω—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
      });
    }

    if (dayjs(tokenObject.validUntil).isBefore(dayjs())) {
      throw new ApiErrorClass(StatusCodes.BAD_REQUEST, "–¢–æ–∫–µ–Ω –≤–∂–µ –≤–∏—á–µ—Ä–ø–∞–Ω–∏–π", {
        code: "EXPIRED_TOKEN",
        telegram:
          "–ü–æ–º–∏–ª–∫–∞üòû\n‚ÑπÔ∏è –ß–∞—Å –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ Telegram –∞–∫–∞—É–Ω—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.",
      });
    }

    const telegramUser = await db.query.users.findFirst({
      where: eq(users.telegramID, telegramID),
    });

    if (telegramUser) {
      throw new ApiErrorClass(StatusCodes.CONFLICT, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π", {
        code: "ALREADY_REGISTERED",
        telegram: "–ü–æ–º–∏–ª–∫–∞üòû\n‚ÑπÔ∏è –°—Ö–æ–∂–µ, —â–æ –≤–∞—à Telegram –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —ñ–Ω—à–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É Eviloma Family.",
      });
    }

    const user = await db
      .update(users)
      .set({ telegramID, telegramUsername: username })
      .where(eq(users.id, tokenObject.user))
      .returning();

    if (!user || user.length === 0) {
      throw UserNotFoundError();
    }

    await db.delete(telegramLinkTokens).where(eq(telegramLinkTokens.id, tokenObject.id));

    return NextResponse.json({}, { status: 200 });
  } catch (error) {
    return apiErrorHandler(req, error);
  }
}

export async function DELETE(req: NextRequest): API<unknown> {
  try {
    const userInfo = await fetchUserInfo();

    await db.update(users).set({ telegramID: null, telegramUsername: null }).where(eq(users.id, userInfo.sub));
    return NextResponse.json({
      status: "success",
    });
  } catch (error) {
    return apiErrorHandler(req, error);
  }
}
